Index: controller/account.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>const db = require('../db.js')\r\nconst sql = require('../utils/sql.js')\r\nconst jwt = require('jsonwebtoken')\r\nconst {secret} = require('../config')\r\n\r\nexports.login = async (ctx, next) => {\r\n    const {account, password} = ctx.request.body;\r\n\r\n    if (account) {\r\n        const {error, data} = await db.exec(sql.accountDetail, [account]);\r\n        if (error) {\r\n            ctx.body = JSON.stringify({\r\n                success: false,\r\n                msg: data.toString()\r\n            })\r\n        } else if (data.length === 0) {\r\n            ctx.body = JSON.stringify(\r\n                {\r\n                    success: false,\r\n                    msg: '账号不存在'\r\n                }\r\n            )\r\n        } else {\r\n\r\n            const user = data[0]\r\n            //对比密码\r\n            if (password === user.password) {\r\n                ctx.body = JSON.stringify({\r\n                    success: true,\r\n                    msg: '登录成功'\r\n                })\r\n\r\n                //加密\r\n                const token= jwt.sign({account: user.account, name: user.name, type: user.type,user_id:user.user_id}, secret)\r\n                //下发用户凭证\r\n                ctx.cookies.set(\r\n                    'token',\r\n                    token,\r\n                    {\r\n                        domain: '10.147.20.228',  // 写cookie所在的域名\r\n                        path: '/',       // 写cookie所在的路径\r\n                        maxAge: 1000 * 60 * 60 * 24 * 10, // cookie有效时长\r\n                        // expires: new Date(new Date().getTime() + (1000 * 60 * 60 * 24 * 10)),  // cookie失效时间\r\n                        httpOnly: false,  // 是否只用于http请求中获取\r\n                        overwrite: false  // 是否允许重写\r\n                    }\r\n                )\r\n\r\n            } else {\r\n                ctx.body = JSON.stringify({\r\n                    success: false,\r\n                    msg: '密码错误'\r\n                })\r\n            }\r\n        }\r\n\r\n\r\n    } else {\r\n        ctx.body = JSON.stringify({\r\n            success: false,\r\n            msg: '账号不能为空'\r\n        })\r\n    }\r\n\r\n    next()\r\n}\r\n\r\nexports.register = async (ctx, next) => {\r\n    const {account, password, phone = '', email = '', nikName = '', name = ''} = ctx.request.body;\r\n\r\n    // 检查账号\r\n    if (!account) {\r\n        ctx.body = JSON.stringify({\r\n            success: false,\r\n            msg: '账号不能为空'\r\n        })\r\n        next()\r\n        return\r\n    }\r\n    if (!password) {\r\n        ctx.body = JSON.stringify({\r\n            success: false,\r\n            msg: '密码不能为空'\r\n        })\r\n        next()\r\n        return\r\n    }\r\n    //type,user_id,account,password,phone,email,nikName,name,create_time\r\n    const {error, data} = await db.exec(sql.accountAdd, [1, new Date().getTime(), account, password, phone, email, nikName, name, new Date()]);\r\n\r\n    if (error) {\r\n        ctx.body = JSON.stringify({\r\n            success: false,\r\n            msg: data.toString()\r\n        })\r\n    } else {\r\n\r\n        ctx.body = JSON.stringify({\r\n            success: true,\r\n            msg: '注册成功'\r\n        })\r\n    }\r\n    next()\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- controller/account.js	(revision be7b666c75205161b8575dba94d21ae9dd0fc7e6)
+++ controller/account.js	(date 1608286313017)
@@ -37,7 +37,7 @@
                     'token',
                     token,
                     {
-                        domain: '10.147.20.228',  // 写cookie所在的域名
+                        domain: 'practice.jirancloud.com',  // 写cookie所在的域名
                         path: '/',       // 写cookie所在的路径
                         maxAge: 1000 * 60 * 60 * 24 * 10, // cookie有效时长
                         // expires: new Date(new Date().getTime() + (1000 * 60 * 60 * 24 * 10)),  // cookie失效时间
